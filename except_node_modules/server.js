const express = require('express')
const bodyParser = require('body-parser')
const app = express();
const nodemailer = require("nodemailer");
const PORT = 3008
const conn = require('./connection/connectdb');
const register = require('./Routes/register')
const login = require('./Routes/login')
const profile = require('./Routes/profile')
const commentInfo = require('./Routes/commentInfo')
const dashboard = require('./Routes/dashboard')
const logout = require('./Routes/logout')
var cookieParser = require('cookie-parser');
var session = require('express-session');
app.use(cookieParser());
app.use(session({
    secret: "secret key",
    resave: false,
    saveUninitialized: true,

}));


app.use(bodyParser.urlencoded({ extended: false }))
app.use(bodyParser.urlencoded({ extended: false }))
app.use(express.urlencoded({ extended: true }))
app.use(bodyParser.json());
app.use(express.static(__dirname + '/public'))
app.set('view engine', 'ejs')
const bcrypt = require('bcrypt');
const crypto = require('crypto');
const { log } = require('console');

// my all end points
app.use('/user', register)
app.use('/user-login', login)
app.use('/dashboard', dashboard)
app.set('view engine', 'ejs')
// // const session = require('./connection/session')
// const bcrypt = require('bcrypt');
// const crypto = require('crypto');
// my all end points
app.use('/user', register)
app.use('/user-login', login)
app.use('/user-logout', logout)
app.use('/dashboard', dashboard)
app.use("/profile", profile)
app.use("/tweet", commentInfo)

async function queryExecuter(query) {
    return new Promise((resolve, rejects) => {
        conn.query(query, (err, result) => {
            if (err) {
                rejects(err);
            }
            resolve(result);
        });
    })
}
app.get("/forget", (req, res) => {
    res.render("forgetPassword")
})
app.get("/getMail?", async (req, res) => {
    var mail = req.query.val;
    var otp = Math.floor(100000 + Math.random() * 900000);
    var mailExistStatus;
    var dbMailsQry = `select email from twitter_clone.users;`;
    var resultmail = await queryExecuter(dbMailsQry);
    if(resultmail.find(e=>e.email == mail)){
        mailExistStatus=true;
    }else{
        mailExistStatus=false;
    }
    const transporter = nodemailer.createTransport({
        host: 'smtp.gmail.com',
        port: 587,
        secure: false,
        auth: {
            user: 'mehtajaini179@gmail.com',
            pass: 'lpnsowiqbkasqaje',
        },
    });
    transporter.sendMail({
        from: "mehtajaini179@gmail.com", // sender address
        to: `${mail}`, // list of receivers
        subject: "test", // Subject line
        html: `<h2>Your OTP : ${otp}</h2>`, // html body
    }).then(info => {
        console.log({ info });
    }).catch(console.error);
    var sql = `update twitter_clone.users set otp= "${otp}" where id="1";`;
    var result = await queryExecuter(sql);
    res.json({result,mailExistStatus}); 
});



app.get("/getOtp", async (req, res) => {
    var otp = req.query.otp;
    var sql = `select otp from twitter_clone.users where id="1";`;
    var result = await queryExecuter(sql);
    if (otp == result[0].otp) {
        res.json({ verified: true })
    } else {
        res.json({ verified: false })
    }
})

app.get("/srch?", async (req, res) => {
    var srchval = req.query.val;
    var sql = `select name from twitter_clone.users `;
    var names = await queryExecuter(sql);
    var arr = [];
    var newArr = [];
    for (let i = 0; i < names.length; i++) {
        arr.push(names[i].name)
    }
    var counter = 0;
    var arrVal;
    for (let j = 0; j < arr.length; j++) {
        var arrValLength = arr[j].length;
        arrVal = arr[j];
        for (let k = 0; k < srchval.length; k++) {
            if (arrVal.includes(srchval[k])) {
                var firstIndex = arr[j].indexOf(srchval[k]);
                arrVal = arrVal.substr(firstIndex + 1, arrValLength)
                counter++;
            }
        }
        if (counter == srchval.length) {
            newArr.push(arr[j])
        }
        counter = 0;
    }
    var matchedResult = [];
    for (let m = 0; m < newArr.length; m++) {
        var sql2 = `SELECT name,user_name,user_image FROM twitter_clone.users where name="${newArr[m]}";`;
        resultantName = await queryExecuter(sql2);
        matchedResult.push(resultantName)
    }
    res.json(matchedResult)

})


app.listen(PORT, () => {
    console.log(`I am listining on ${PORT}`);
})